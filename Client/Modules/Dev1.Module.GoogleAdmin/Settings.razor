@namespace Dev1.Module.GoogleAdmin
@inherits ModuleBase
@inject ISettingService SettingService
@inject IStringLocalizer<Settings> Localizer

<div class="container">
    <div class="row mb-3 align-items-center">
        <Label Class="col-sm-3" For="servicekey" HelpText="Your Google Key in json form">Service Key: </Label>
        <div class="col-sm-9">
            <textarea id="servicekey" rows="5" class="form-control" @bind="@_serviceKey" />
        </div>
    </div>


    <div class="row mb-3 align-items-center">
        <Label Class="col-sm-3" For="domain" HelpText="Calling some Api's' requires setting the domain">Domain: </Label>
        <div class="col-sm-9">
            <input type="text" id="domain" class="form-control" @bind="@_domain" />
        </div>
    </div>

    <div class="row mb-3 align-items-center">
        <Label Class="col-sm-3" For="adminemail" HelpText="Calling the Directory Api requires impersonating an Admin User">Admin Email: </Label>
        <div class="col-sm-9">
            <input type="text" id="value" class="form-control" @bind="@_adminEmail" />
        </div>
    </div>



    <div class="row mb-3 align-items-center">
        <Label Class="col-sm-3" For="calendar" HelpText="This default organisation calendar">Default Calendar: </Label>
        <div class="col-sm-9">
            <input type="text" id="calendar" class="form-control" @bind="@_defaultCalendarId" />
        </div>

    </div>
</div>

@code {
    private string resourceType = "Dev1.Module.GoogleAdmin.Settings, Dev1.Module.GoogleAdmin.Client.Oqtane"; // for localization
    public override string Title => "GoogleAdmin Settings";

    string _serviceKey;
    string _defaultCalendarId;

    string _adminEmail;
    string _domain;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetSiteSettingsAsync(ModuleState.SiteId);
            _serviceKey = SettingService.GetSetting(settings, "Dev1.GoogleAdmin:ServiceKey", "");
            _defaultCalendarId = SettingService.GetSetting(settings, "Dev1.GoogleAdmin:_defaultCalendarId", "");
            _domain = SettingService.GetSetting(settings, "Dev1.GoogleAdmin:_domain", "");
            _adminEmail = SettingService.GetSetting(settings, "Dev1.GoogleAdmin:_adminEmail", "");
        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetSiteSettingsAsync(ModuleState.SiteId);
            SettingService.SetSetting(settings, "Dev1.GoogleAdmin:ServiceKey", _serviceKey,true);
            SettingService.SetSetting(settings, "Dev1.GoogleAdmin:_defaultCalendarId", _defaultCalendarId);
            SettingService.SetSetting(settings, "Dev1.GoogleAdmin:_domain", _domain);
            SettingService.SetSetting(settings, "Dev1.GoogleAdmin:_adminEmail", _adminEmail);




            await SettingService.UpdateSiteSettingsAsync(settings, ModuleState.SiteId);
        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }
}
