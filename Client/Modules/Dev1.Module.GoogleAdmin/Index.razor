@using Dev1.Module.GoogleAdmin.Services
@using Dev1.Module.GoogleAdmin.Shared.Models
@using Radzen.Blazor
@namespace Dev1.Module.GoogleAdmin
@inherits ModuleBase
@inject IGoogleAdminService GoogleAdminService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer


<RadzenDialog />
<RadzenNotification />

@if (_GoogleAdmins == null)
{
    <p><em>Loading...</em></p>
}
else
{

        <h4>GOOGLE ADMIN</h4>
        <p>The module does not have a user interface as it's only purpose is to set the Account Credentials (and other settings) for accessing the Google API</p>
        <p>You only need to add one of these modules per site, as the settings are saved site wide.</p>

    
    @* <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add GoogleAdmin" ResourceKey="Add" /> *@
    <br />
    <br />
@*     @if (@_GoogleAdmins.Count != 0)
    {
        <Pager Items="@_GoogleAdmins">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>@Localizer["Name"]</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.GoogleAdminId.ToString())" ResourceKey="Edit"  /></td>
                <td><ActionDialog Header="Delete GoogleAdmin" Message="Are You Sure You Wish To Delete This GoogleAdmin?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" ResourceKey="Delete"  Id="@context.GoogleAdminId.ToString()" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>@Localizer["Message.DisplayNone"]</p>
    } *@
}

@code {
    // public override string RenderMode => RenderModes.Interactive;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Radzen.Blazor/css/" + "default.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Radzen.Blazor/" + "Radzen.Blazor.js" },
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" },
    };

    List<GoogleAdmin> _GoogleAdmins;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _GoogleAdmins = await GoogleAdminService.GetGoogleAdminsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading GoogleAdmin {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Delete(GoogleAdmin GoogleAdmin)
    {
        try
        {
            await GoogleAdminService.DeleteGoogleAdminAsync(GoogleAdmin.GoogleAdminId, ModuleState.ModuleId);
            await logger.LogInformation("GoogleAdmin Deleted {GoogleAdmin}", GoogleAdmin);
            _GoogleAdmins = await GoogleAdminService.GetGoogleAdminsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting GoogleAdmin {GoogleAdmin} {Error}", GoogleAdmin, ex.Message);
            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
        }
    }
}