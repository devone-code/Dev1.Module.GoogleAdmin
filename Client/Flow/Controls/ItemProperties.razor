@namespace Dev1.Flow.Core.Client

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@using System

@using System.Threading.Tasks

@using System.Net

@using Oqtane.Shared
@using System.Linq
@using System.Collections
@using System.Collections.Generic
@using System.Security.Cryptography.Xml
@using Dev1.Flow.Core
@using Dev1.Flow.Core.Models


@if (FlowItem != null)
{
    @if (!ForProcessing) @* this section is shown when the FlowItem is being added to a Flow (designer) *@
    {
        @if (FlowItem != null)
        {
            @*             string propId = $"{FlowItem.Name}_Prompt";
            <label for="@propId">Enter a prompt that will be shown to the user that processes this item</label>
            <div class="mb-4">
                <textarea style="min-height:150px;" rows="5" class="form-control" value="@Prompt" @onchange="async (e) => await SetPrompt(e)" placeholder="Prompt" id="@propId" required></textarea>


            </div> *@
        }

    }
    //This section is shown when the action is being processed in a Workflow by the Flow system.
    else if (FlowItem != null && FlowItem.ItemProperties.Any())
    {
        <fieldset disabled=@IsDisabled>

        @foreach (var property in WorkflowItem.WorkflowItemProperties.Where(x => x.IsRequired))
        {
            @if (!String.IsNullOrEmpty(WorkflowItem.Prompt))
            {
                <p>@WorkflowItem.Prompt</p>
            }
            @*             <div class="form-check">
                <input class="form-check-input" checked="@Convert.ToBoolean(property.Value)" required="@property.IsRequired" type="checkbox" name="@property.Name" id="@property.Name" value="@Convert.ToBoolean(property.Value)" @onchange="e => SetWorkflowItemProperty(property.Name,e.Value.ToString())">
                <label class="form-check-label" for="@property.Name">

                    @property.Name
                </label>
            </div> *@

            var inputType = (eDataType)property.InputTypeId;

            @switch (inputType)
            {
                case eDataType.String:
                    {
                        <InputString IsRequired="@property.IsRequired" InputTypeName="Text" @bind-PropertyValue:get="@property.Value" @bind-PropertyValue:set="e => SetWorkflowItemProperty(property.Name,e)"
                                     PropertyId="@property.Id.ToString()" PropertyName="@property.Name"></InputString>
                        break;
                    }
                case eDataType.Bool:
                    {
                        <InputBool IsRequired="@property.IsRequired" InputTypeName="Checkbox" @bind-PropertyValue:get="@property.Value" @bind-PropertyValue:set="e => SetWorkflowItemProperty(property.Name,e)"
                                   PropertyId="@property.Id.ToString()" PropertyName="@property.Name"></InputBool>
                        break;
                    }


                    @*             case "Textarea":
                {
                    <InputString IsRequired="@answer.Question.IsRequired" InputTypeName="textarea" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputString>
                    break;
                }
            case "Email":
                {
                    <InputString IsRequired="answer.Question.IsRequired" InputTypeName="Email" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputString>
                    break;
                }
            case "Phone":
                {
                    <InputString IsRequired="@answer.Question.IsRequired" InputTypeName="Tel" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputString>
                    break;
                }
            case "Password":
                {
                    <InputString IsRequired="@answer.Question.IsRequired" InputTypeName="Password" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputString>
                    break;
                }
            case "Contact Name":
                {
                    <InputString IsRequired="@answer.Question.IsRequired" InputTypeName="Text" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputString>
                    break;
                }
            case "Custom Table":
                {
                    <CustomTableValueLookup IsDropdown="true" IsRequired="@answer.Question.IsRequired"
                    @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    CustomTableId="@Convert.ToInt16(@answer.Question.CustomTableId)"
                    PropertyId="@answer.Question.Id.ToString()"></CustomTableValueLookup>


                    break;
                }
            case "Custom Table (Multi)":
                {
                    <CustomTableValueLookup IsDropdown="true" IsMultiSelect="true" IsRequired="answer.Question.IsRequired" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    CustomTableId="@Convert.ToInt16(@answer.Question.CustomTableId)"
                    PropertyId="@answer.Question.Id.ToString()"></CustomTableValueLookup>


                    break;
                }
            case "Radio":
                {
                    <CustomTableValueLookup IsDropdown="false" IsRequired="@answer.Question.IsRequired" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    CustomTableId="@Convert.ToInt16(@answer.Question.CustomTableId)"
                    PropertyId="@answer.Question.Id.ToString()"></CustomTableValueLookup>


                    break;
                }
            case "Checkbox (Multi)":
                {
                    <CustomTableValueLookup IsDropdown="false" IsMultiSelect="true" IsRequired="@answer.Question.IsRequired" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    CustomTableId="@Convert.ToInt16(@answer.Question.CustomTableId)"
                    PropertyId="@answer.Question.Id.ToString()"></CustomTableValueLookup>


                    break;
                }
            case "Whole Number":
                {
                    <InputInt IsRequired="@answer.Question.IsRequired" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputInt>
                    break;
                }
            case "Decimal Number":
                {
                    <InputDecimal IsRequired="@answer.Question.IsRequired" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputDecimal>
                    break;
                }
            case "Date":
                {
                    <InputDateTime IsRequired="@answer.Question.IsRequired" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputDateTime>


                    break;
                }  
            case "Checkbox":
                {
                    <InputBool IsRequired="@answer.Question.IsRequired" InputTypeName="checkbox" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputBool>
                    break;
                }
            case "Switch":
                {
                    <InputBool IsRequired="@answer.Question.IsRequired" InputTypeName="switch" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputBool>
                    break;
                }
            case "Subscribe":
                {
                    <InputBool IsRequired="false" InputTypeName="checkbox" @bind-PropertyValue:get="@answer.Value" @bind-PropertyValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputBool>
                    break;
                }


            case "Full Address":
                {
                    <InputAddress IsFullAddress="true" IsRequired="@answer.Question.IsRequired" InputTypeName="Address" @bind-AddressValue:get="@answer.Value" @bind-AddressValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputAddress>
                    break;
                }
            case "Zip/Postcode":
                {
                    <InputAddress IsFullAddress="false" IsRequired="@answer.Question.IsRequired" InputTypeName="Address" @bind-AddressValue:get="@answer.Value" @bind-AddressValue:set="SetValue"
                    PropertyId="@answer.Question.Id.ToString()" PropertyName="@answer.Question.QuestionText"></InputAddress>
                    break;
                } *@

            }











            <div class="px-9 py-3 border-top text-end">
                @if (WorkflowItem.Status != (int)eWorkflowStatus.Complete)
                {
                    @if (!WorkflowItem.WorkflowItemProperties.Any(x => x.IsRequired && String.IsNullOrEmpty(x.Value)))
                    {
                        <button type="button" class="btn btn-success bg-hover-primary align-items-center gap-1" @onclick="async (e) => await OnProcessWorkflowItemAsync.InvokeAsync()">Process</button>
                    }
                }
                else
                {
                        <p>This step has been processed.<i class="text-success ti ti-circle-check"></i></p>
                }
            </div>

        }
        </fieldset>
    }
    else
    {
        <p>This item does not have any properties. As long as you have fullfilled the instructions for this item, you may go ahead and process it.</p>

    }


}

@* Always Pass in a non-null FlowItem (Contained in the base Class). *@
@code {

    [Parameter]
    public FlowItem FlowItem { get; set; }

    [Parameter]
    public WorkflowItem WorkflowItem { get; set; }

    [Parameter]
    public EventCallback<FlowItem> OnFlowItemChanged { get; set; }

    [Parameter]
    public EventCallback<WorkflowItem> OnWorkflowItemChanged { get; set; }

    [Parameter]
    public EventCallback OnProcessWorkflowItemAsync { get; set; }

    [Parameter]
    public bool ForProcessing { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     //FLOW: Initialze the properties for this Flow Action.
    //     //System Properties are used when an Action is added to a FLow in the Flow Designer.
    //     //These are properties that are required for the Action to run.
    //     //User Properties are values that are entered by the user when the Action is executed within a Workflow
    //     //User properties are only needed when the Action.ProcessedBy is set to eProcessedBy.User
    //     //
    //     //Note, an action does not need any properties to succesfully run, it depends on what you are trying to do with it.

    //     List<FlowItemProperty> flowItemProperties = new List<FlowItemProperty>();

    //     flowItemProperties.Add(new FlowItemProperty()
    //         {
    //             Name = "Confirm",
    //             DataTypeId = Convert.ToInt16(eDataType.Bool),
    //             IsSystem = false,
    //             IsRequired = true
    //         });


    //     //YOU MUST call the base class to create the flow Item Properties.
    //     await base.InitializeProperties(flowItemProperties);
    // }

    // protected override void OnParametersSet()
    // {

    //     // @if (FlowItem != null && FlowItem.ItemProperties.Any(x => x.Name == "Prompt"))
    //     // {
    //     //     Prompt = FlowItem.ItemProperties.Where(x => x.Name == "Prompt").First().Value;
    //     // }
    //     //ActionDefinition = new FlowAction()
    //     // {
    //     //     Name = "Email Notification",
    //     //     ModuleDefinitionName = "Dev1.Module.QandA",
    //     //     FriendlyModuleName = "QandA",
    //     //     FlowActionName = "Email Notification",
    //     //     InputTypeId = Convert.ToInt16(eInputType.SystemTask),
    //     //     AssignTo = eActionAssignee.System,

    //     // };

    //     // ActionDefinition.FlowActionSystemProperties.Add(new FlowActionSystemProperty
    //     // {
    //     //     Name = "To Email Address",
    //     //     DataTypeId = Convert.ToInt16(eInputType.Text),
    //     //     IsRequired = true,
    //     // });


    // }

    // private async Task SetPrompt(ChangeEventArgs args)
    // {

    //     try
    //     {

    //         //await GetFiles();
    //         //ActionProperty promptArgs = new ActionProperty() { Name = "Folder", IsSystemProperty = true, DataTypeId = eDataType.Int };
    //         await base.SetFlowItemProperty("Prompt", args.Value.ToString(), true);
    //         //StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         await logger.LogError(ex, "Error Loading Files {Error}", ex.Message);
    //         //_message = "There was an error selecting this folder.";
    //         //_messagetype = MessageType.Error;
    //     }
    // }

    // private async Task ValueChanged(string propertyint propertyId, ChangeEventArgs newValue)
    // {
    //     base.SetWorkflowItemProperty()
    //     WorkflowItem.WorkflowItemProperties.Where(x => x.Id == propertyId).First().Value = newValue.Value.ToString();
    //     //answer.Value = newValue;
    // }


    public async Task SetFlowItemProperty(string PropertyName, string PropertyValue, bool IsSystem)
    {

        var itemProperty = FlowItem.ItemProperties.Where(x => x.Name == PropertyName).FirstOrDefault();
        if (itemProperty != null)
        {

            itemProperty.Value = PropertyValue;

        }

        await OnFlowItemChanged.InvokeAsync(FlowItem);
    }
    public async Task SetWorkflowItemProperty(string PropertyName, string PropertyValue)
    {

        var itemProperty = WorkflowItem.WorkflowItemProperties.Where(x => x.Name == PropertyName).FirstOrDefault();
        if (itemProperty != null)
        {

            itemProperty.Value = PropertyValue;

        }

        await OnWorkflowItemChanged.InvokeAsync(WorkflowItem);
    }





    // private async Task ProcessWorkflowItemAsync()
    // {
    //     //Having each Flow Item have it's own ProcessWorkflowItemAsync method allows you to do any processing that is specific to this action.
    //     //This is where you would do things like send an email, create a record in a database, or any other business logic required.
    //     //You can also set the status of the WorkflowItem to Aborted if something goes wrong.
    //     //In this example, we just set the status to complete but it could also fail
    //     //in which case you should log an error to Oqtane and set the status of this item to Aborted.

    //     //YOUR PROCESSOR CODE GOES HERE

    //     //Then call UpdateWorkflowStatus to complete the action,
    //     //this will also trigger a callback to the workflow processor to continue processing the workflow.
    //     await base.UpdateWorkflowStatus(eWorkflowStatus.Complete);

    // }

}
