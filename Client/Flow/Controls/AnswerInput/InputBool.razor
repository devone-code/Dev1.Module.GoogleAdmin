@namespace Dev1.Flow.Core.Client

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inherits InputTypeBase



<div class="form-select-wrapper mb-3 text-start">
@*     @if (InputTypeName == "checkbox")
    { *@
        <div class="form-check">
            <input class="form-check-input" checked="@Convert.ToBoolean(PropertyValue)" required="@IsRequired" type="checkbox" name="@PropertyName" id="@PropertyName" value="@localVal" @onchange="ValueChanged">
            <label class="form-check-label" for="@PropertyName">
                @PropertyName
            </label>
        </div>
@*     }
    else if(InputTypeName == "switch")
    {
        <div class="form-check form-switch">
            <input class="form-check-input" checked="@Convert.ToBoolean(PropertyValue)" required="@IsRequired" type="checkbox" role="switch" name="@PropertyName" id="@PropertyName" value="@localVal" @onchange="ValueChanged">
            <label class="form-check-label" for="@PropertyName">
                @PropertyName
            </label>
        </div>
        
    } *@
</div>


@code
{
    private bool localVal;
    private async Task ValueChanged(ChangeEventArgs e)
    {
        localVal = Convert.ToBoolean(e.Value.ToString());
        PropertyValue = localVal.ToString();
        //OriginalValue = propertyvalue;
        await PropertyValueChanged.InvokeAsync(PropertyValue.ToLower());
    }

    protected override void OnParametersSet()
    {
        
        base.OnParametersSet();


        // if (String.IsNullOrEmpty(PropertyValue))
        // {
        //     PropertyValue = QandAHelper.SetInitialPropertyValue(eDataType.Bool);
        //     //propertyvalue = Convert.ToBoolean(PropertyValue);
        //     //PropertyValueChanged.InvokeAsync(propertyvalue.ToString());
        // }
        // else
        // {
        //     propertyvalue = Convert.ToBoolean(PropertyValue);
        // }
    }




}