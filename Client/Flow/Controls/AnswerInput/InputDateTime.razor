@namespace Dev1.Flow.Core.Client

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@using Radzen.Blazor

@inherits InputTypeBase


@*<p>Use input <code>type="text"</code>.</p>*@
@*<label for="t-text" class="sr-only">Text</label>*@
@if (dateValue != null)
{
    if(IsDisabled)
    {
        <div class="mb-4">
            <label for="@PropertyId">@dateValue.ToString("dd/MM/yyyy HH:mm")</label>
        </div>
    }
    else
    {
    <div class="mb-4">
        <label for="@PropertyId">@PropertyName</label>
        <RadzenDatePicker @bind-Value=@dateValue HourFormat="12"
        
        ShowTime="true" ShowSeconds="false" HoursStep="1" MinutesStep="1"
        DateFormat="dd/MM/yyyy hh:mm"
        Name="EventStartDate" Change="@((e) => OnPropertyValueChanged(Convert.ToDateTime(e)))" />
    </div>
    }

}




@code
{


    //internal string propertyvalue;

    DateTime dateValue;
    private Task OnPropertyValueChanged(DateTime e)
    {


        //if (DateTime.TryParse(e.Value.ToString(), out dateValue))
        //{
        //DateTime ValidatedDate = new DateTime(e.Year, e.Month, e.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
        PropertyValue = e.ToShortDateString();
        //OriginalValue = propertyvalue;

        return PropertyValueChanged.InvokeAsync(e.ToString());
        // }
        // else
        // {
        //     //ShowToastError("Date has incorrect Format");
        //     return Task.CompletedTask;
        // }

    }


    protected override async Task OnParametersSetAsync()
    {
        //ase.OnParametersSet();
        //DateTime dateValue;
        @if (!String.IsNullOrEmpty(PropertyValue))
        {
            DateTime.TryParse(PropertyValue, out dateValue);
        }
        else
        {
            dateValue = DateTime.Today;
            DateTime ValidatedDate = new DateTime(dateValue.Year, dateValue.Month, dateValue.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
            await PropertyValueChanged.InvokeAsync(ValidatedDate.ToString());
        }
        //PropertyValue = dateValue.ToShortDateString();
        //ropertyvalue = PropertyValue;
    }




}