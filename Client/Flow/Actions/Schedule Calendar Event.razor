@* This razor view, along with the class for this Flow Action, need the same namespace and Name
For display purposes, the Razor view may contain spaces, flow will remove these when attempting to find the Flow Processor for this action
EG:
  Notification Email.razor and NotificationEmail.cs will work
  Notification EmailView.razor and NotificationEmail.cs will not work as they have different names once the spaces have been removed

  The FlowAction Definition follows the Same Rules with the Addition of 'Definition' to the end of the class name
  //So in this instance, even though our View is named 'Upload File', the processor class is named UploadFile.cs
  //and the Definition class is named 'UserTaskDefinition.cs



  //Flow items are either automatically processed by the system, or require manual processing.
  //This is defined using the ProcessedBy property of the FlowItem Definition.
  //Flow Items that are automatically proceesed by the system are done so via the ExecuteActionAsync method of the Flow Item class in the server project.
  //Flow Items that require manual processing, are done so via the razor page of the Flow Item which resides in the Client project.
  *@


@namespace Dev1.Module.GoogleAdmin.GoogleAction

@using Dev1.Module.GoogleAdmin.Services
@using Oqtane.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.DependencyInjection
@using System
@using Oqtane.Services
@using System.Threading.Tasks
@using Oqtane.Enums
@using System.Net.Mail
@using System.Net
@using Oqtane.Shared
@using System.Linq
@using System.Collections
@using System.Collections.Generic
@using System.Security.Cryptography.Xml
@using Dev1.Flow.Core
@using Dev1.Flow.Core.Models
@using Dev1.Flow.Core.Client
@using Dev1.Flow.Core.Helpers

@using NodaTime.TimeZones

@inject IGoogleCalendarService GoogleCalendarService
@inject Dev1.Module.GoogleAdmin.Shared.StateContainer stateContainer

@using Google.Apis.Calendar.v3.Data




@* Must Inherit Dev1.Module.Flow.FlowActionViewBase *@
@inherits FlowActionViewBase

@if (FlowItemProperties != null)
{
    if (CalendarProperty != null)
    {
        if (!ForProcessing || ((ForProcessing == CalendarProperty.IsForWorkflow)))
        {
            <div class="row card mb-3">
                <div class="card-header">
                    @CalendarProperty.Name
                    @if (CalendarProperty.IsRequired)
                    {
                        <small> (Required)</small>
                    }
                </div>
                <div class="card-body">

                    @if (!ForProcessing)
                    {
                        if (CalendarProperty.ForceWorkflow == false)
                        {
                            //Allow the user to specify whether this property is a Workflow Iteem Property.
                            string IsForWorkflowPropertyId = $"{CalendarProperty.Id}_IsForWorkflow";
                            <div class="mb-2">
                                <InputBool IsRequired="false" InputTypeName="Checkbox" @bind-PropertyValue:get="@CalendarProperty.IsForWorkflow.ToString()"
                                           @bind-PropertyValue:set="e => SetIsForWorkflowProperty(CalendarProperty,e)"
                                           PropertyId="@IsForWorkflowPropertyId" PropertyName="For Workflow"></InputBool>
                            </div>
                        }
                        else
                        {
                            <p><small>This property is set by the user processing this action in a workflow</small></p>
                        }
                    }


                    @if (ForProcessing)
                    {
                        @if (stateContainer.Calendars != null)
                        {
                            <div class="form-group mb-3">
                                <label for="calendars">Select the Calendar</label>



                                <select disabled="@(ForProcessing != CalendarProperty.IsForWorkflow)" id="calendars" class="form-select" aria-label="Select Custom Table"
                                        @bind:get="@CalendarProperty.Value"
                                        @bind:set="@(async (e) => await SetCalendarProperty(e))">
                                    @foreach (var Calendar in stateContainer.Calendars.Items)
                                    {
                                        if (Calendar.Id == CalendarProperty.Value)
                                        {
                                            <option selected="selected" value="@Calendar.Id">@Calendar.Summary</option>
                                        }
                                        else
                                        {
                                            <option value="@Calendar.Id">@Calendar.Summary</option>
                                        }
                                    }
                                </select>

                            </div>
                        }
                        else
                        {
                            <div class="spinner-border text-info" role="status">
                            </div>
                        }
                    }


                </div>
            </div>
        }
    }







    if (TimezoneProperty != null)
    {
        if (!ForProcessing || ((ForProcessing == TimezoneProperty.IsForWorkflow)))
        {
            <div class="row card mb-3">
                <div class="card-header">
                    @TimezoneProperty.Name
                    @if (TimezoneProperty.IsRequired)
                    {
                        <small> (Required)</small>
                    }
                </div>
                <div class="card-body">

                    @if (!ForProcessing)
                    {
                        if (TimezoneProperty.ForceWorkflow == false)
                        {
                            //Allow the user to specify whether this property is a Workflow Iteem Property.
                            string IsForWorkflowPropertyId = $"{TimezoneProperty.Id}_IsForWorkflow";
                            <div class="mb-2">
                                <InputBool IsRequired="false" InputTypeName="Checkbox" @bind-PropertyValue:get="@TimezoneProperty.IsForWorkflow.ToString()"
                                           @bind-PropertyValue:set="e => SetIsForWorkflowProperty(TimezoneProperty,e)"
                                           PropertyId="@IsForWorkflowPropertyId" PropertyName="For Workflow"></InputBool>
                            </div>
                        }
                        else
                        {
                            <p><small>This property is set by the user processing this action in a workflow</small></p>
                        }
                    }
                    @if ((ForProcessing == StartDateProperty.IsForWorkflow))
                    {
                        <fieldset disabled="@(ForProcessing != TimezoneProperty.IsForWorkflow)">

                            <select disabled="@(ForProcessing != TimezoneProperty.IsForWorkflow)" id="timezones" class="form-select" aria-label="Select the Timezone"
                                    @bind:get="@TimezoneProperty.Value"
                                    @bind:set="@(async (e) => await SetItemProperty(TimezoneProperty,e))">
                                @foreach (var timezone in TzdbDateTimeZoneSource.Default.ZoneLocations
                               .Where(x => x.CountryCode == "AU")
                               .Select(x => x.ZoneId))
                                {
                                    if (timezone == CalendarProperty.Value)
                                    {
                                        <option selected="selected" value="@timezone">@timezone</option>
                                    }
                                    else
                                    {
                                        <option value="@timezone">@timezone</option>
                                    }
                                }
                            </select>
                        </fieldset>
                    }

                </div>
            </div>
        }
    }

    if (StartDateProperty != null)
    {
        if (!ForProcessing || ((ForProcessing == StartDateProperty.IsForWorkflow)))
        {
            <div class="row card mb-3">
                <div class="card-header">
                    @StartDateProperty.Name
                    @if (StartDateProperty.IsRequired)
                    {
                        <small> (Required)</small>
                    }
                </div>
                <div class="card-body">

                    @if (!ForProcessing)
                    {
                        if (StartDateProperty.ForceWorkflow == false)
                        {
                            //Allow the user to specify whether this property is a Workflow Iteem Property.
                            string IsForWorkflowPropertyId = $"{StartDateProperty.Id}_IsForWorkflow";
                            <div class="mb-2">
                                <InputBool IsRequired="false" InputTypeName="Checkbox" @bind-PropertyValue:get="@StartDateProperty.IsForWorkflow.ToString()"
                                           @bind-PropertyValue:set="e => SetIsForWorkflowProperty(StartDateProperty,e)"
                                           PropertyId="@IsForWorkflowPropertyId" PropertyName="For Workflow"></InputBool>
                            </div>
                        }
                        else
                        {
                            <p><small>This property is set by the user processing this action in a workflow</small></p>
                        }
                    }
                    @if ((ForProcessing == StartDateProperty.IsForWorkflow))
                    {
                        <fieldset disabled="@(ForProcessing != StartDateProperty.IsForWorkflow)">

                            <InputDateTime IsDisabled="@(ForProcessing != StartDateProperty.IsForWorkflow)"
                                           InputTypeName="@eInputType.Date.ToString()" IsRequired="@StartDateProperty.IsRequired"
                                           PropertyId="@StartDateProperty.Name"
                                           PropertyName="@StartDateProperty.Name"
                                           @bind-PropertyValue:get="StartDateProperty.Value"
                                           @bind-PropertyValue:set="@(async (e) => await SetItemProperty(StartDateProperty, e))"></InputDateTime>
                        </fieldset>
                    }

                </div>
            </div>
        }
    }


    if (EndDateProperty != null)
    {
        if (!ForProcessing || ((ForProcessing == EndDateProperty.IsForWorkflow)))
        {
            <div class="row card mb-3">
                <div class="card-header">
                    @EndDateProperty.Name
                    @if (EndDateProperty.IsRequired)
                    {
                        <small> (Required)</small>
                    }
                </div>
                <div class="card-body">

                    @if (!ForProcessing)
                    {
                        if (EndDateProperty.ForceWorkflow == false)
                        {
                            //Allow the user to specify whether this property is a Workflow Iteem Property.
                            string IsForWorkflowPropertyId = $"{EndDateProperty.Id}_IsForWorkflow";
                            <div class="mb-2">
                                <InputBool IsRequired="false" InputTypeName="Checkbox" @bind-PropertyValue:get="@EndDateProperty.IsForWorkflow.ToString()"
                                           @bind-PropertyValue:set="e => SetIsForWorkflowProperty(EndDateProperty,e)"
                                           PropertyId="@IsForWorkflowPropertyId" PropertyName="For Workflow"></InputBool>
                            </div>
                        }
                        else
                        {
                            <p><small>This property is set by the user processing this action in a workflow</small></p>
                        }
                    }
                    @if ((ForProcessing == StartDateProperty.IsForWorkflow))
                    {
                        <fieldset disabled="@(ForProcessing != EndDateProperty.IsForWorkflow)">

                            <InputDateTime IsDisabled="@(ForProcessing != EndDateProperty.IsForWorkflow)" InputTypeName="@eInputType.Date.ToString()" IsRequired="@EndDateProperty.IsRequired"
                                           PropertyId="@EndDateProperty.Name" PropertyName="@EndDateProperty.Name"
                                           @bind-PropertyValue:get="EndDateProperty.Value"
                                           @bind-PropertyValue:set="@(async (e) => await SetItemProperty(EndDateProperty, e))"></InputDateTime>
                        </fieldset>
                    }

                </div>
            </div>
        }
    }

    if (SummaryProperty != null)
    {
        if (!ForProcessing || ((ForProcessing == EndDateProperty.IsForWorkflow)))
        {
            <div class="row card mb-3">
                <div class="card-header">
                    @SummaryProperty.Name
                    @if (SummaryProperty.IsRequired)
                    {
                        <small> (Required)</small>
                    }
                </div>
                <div class="card-body">

                    @if (!ForProcessing)
                    {
                        if (SummaryProperty.ForceWorkflow == false)
                        {
                            //Allow the user to specify whether this property is a Workflow Iteem Property.
                            string IsForWorkflowPropertyId = $"{SummaryProperty.Id}_IsForWorkflow";
                            <div class="mb-2">
                                <InputBool IsRequired="false" InputTypeName="Checkbox" @bind-PropertyValue:get="@SummaryProperty.IsForWorkflow.ToString()"
                                           @bind-PropertyValue:set="e => SetIsForWorkflowProperty(SummaryProperty,e)"
                                           PropertyId="@IsForWorkflowPropertyId" PropertyName="For Workflow"></InputBool>
                            </div>
                        }
                        else
                        {
                            <p><small>This property is set by the user processing this action in a workflow</small></p>
                        }
                    }

                        <fieldset disabled="@(ForProcessing != SummaryProperty.IsForWorkflow)">

                            <InputString InputTypeName="text" IsRequired="@SummaryProperty.IsRequired"
                                         PropertyId="@SummaryProperty.Name" PropertyName="@SummaryProperty.Name"
                                         @bind-PropertyValue:get="SummaryProperty.Value"
                                         @bind-PropertyValue:set="@(async (e) => await SetItemProperty(SummaryProperty, e))"></InputString>
                        </fieldset>
                    

                </div>
            </div>
        }
    }
}
else
{
    <p>This item does not have any properties. As long as you have fullfilled the instructions for this item, you may go ahead and process it.</p>

}

@* Always Pass in a non-null FlowItem (Contained in the base Class). *@
@code {
    // private IList<Group> userGroups;

    //private FlowItemProperty OrganisationCalendarProperty;
    private FlowItemProperty CalendarProperty;
    private FlowItemProperty StartDateProperty;
    private FlowItemProperty TimezoneProperty;

    private FlowItemProperty EndDateProperty;
    private FlowItemProperty SummaryProperty;
    //private FlowItemProperty DescriptionProperty;

    private bool UseOrganisationCalendar;

    //private Models.eGroupRole SelectedRole;

    protected override async Task OnInitializedAsync()
    {
        //Note, an action does not need any properties to succesfully run, it depends on what you are trying to do with it.
        List<FlowItemProperty> flowItemProperties = new List<FlowItemProperty>();

        if (!ForProcessing)
        {
            flowItemProperties.Add(new FlowItemProperty()
                {
                    Name = "Organisation Calendar",
                    DataTypeId = Convert.ToInt16(eDataType.Bool),
                    ForceWorkflow = true,
                    IsForWorkflow = true,
                    IsRequired = false
                });


            flowItemProperties.Add(new FlowItemProperty()
                {
                    Name = "Calendar",
                    DataTypeId = Convert.ToInt16(eDataType.String),
                    ForceWorkflow = true,
                    IsForWorkflow = true,
                    IsRequired = true
                });


            flowItemProperties.Add(new FlowItemProperty()
                {
                    Name = "Timezone",
                    DataTypeId = Convert.ToInt16(eDataType.String),
                    ForceWorkflow = true,
                    IsForWorkflow = true,
                    IsRequired = true
                });

            flowItemProperties.Add(new FlowItemProperty()
                {
                    Name = "Start Date",
                    DataTypeId = Convert.ToInt16(eDataType.Date),
                    ForceWorkflow = true,
                    IsForWorkflow = true,
                    IsRequired = true
                });

            flowItemProperties.Add(new FlowItemProperty()
                {
                    Name = "End Date",
                    DataTypeId = Convert.ToInt16(eDataType.Date),
                    ForceWorkflow = true,
                    IsForWorkflow = true,
                    IsRequired = true
                });

            flowItemProperties.Add(new FlowItemProperty()
                {
                    Name = "Summary",
                    DataTypeId = Convert.ToInt16(eDataType.String),
                    ForceWorkflow = false,
                    IsForWorkflow = false,
                    IsRequired = true
                });

            //Left this out for now as HTML isn't displayed in the calendar properly. A Google thing
            // flowItemProperties.Add(new FlowItemProperty()
            //     {
            //         Name = "Description",
            //         DataTypeId = Convert.ToInt16(eDataType.String),
            //         ForceWorkflow = false,
            //         IsForWorkflow = false,
            //         IsRequired = true
            //     });
        }

        //YOU MUST call this base method AFTER adding your item properties above but ONLY WHEN !ForProcessing
        await base.InitializeProperties(flowItemProperties);

        //OrganisationCalendarProperty = GetActionProperty("Organisation Calendar");
        CalendarProperty = GetActionProperty("Calendar");
        TimezoneProperty = GetActionProperty("Timezone");
        StartDateProperty = GetActionProperty("Start Date");
        EndDateProperty = GetActionProperty("End Date");
        SummaryProperty = GetActionProperty("Summary");
        //DescriptionProperty = GetActionProperty("Description");


        await GetCalendars();



    }

    private async Task GetCalendars()
    {

        //We must always check for null properties as some may have been added after a workflow was created (meaning the workflow will not have the property).
        //This can happen durin gdevelopment of the Flow Action.




        try
        {

            // if (forOrganisation)
            // {
            //     if ((ForProcessing && (WorkflowStatus != (int)eWorkflowStatus.Complete)) || (!ForProcessing && !CalendarProperty.IsForWorkflow))
            //     {
            //         Calendar calendar = await GoogleCalendarService.GetGoogleCalendarAsync(ModuleState.ModuleId, null);
            //         CalendarProperty.Value = calendar.Id;
            //         await SetItemProperty(CalendarProperty, calendar.Id);
            //     }
            // }
            // else
            // {
            if (stateContainer.Calendars == null || stateContainer.Calendars.Items.Count == 1)
            {
                if ((ForProcessing && (WorkflowStatus != (int)eWorkflowStatus.Complete)) || (!ForProcessing && !CalendarProperty.IsForWorkflow))
                {
                    var calendars = await GoogleCalendarService.GetAvailableGoogleCalendarsAsync(ModuleState.ModuleId, PageState.User.Email);
                    if (calendars != null)
                        stateContainer.Calendars = calendars;

                }
            }

            if (stateContainer.Calendars != null && stateContainer.Calendars.Items.Count > 0)
            {
                await SetItemProperty(CalendarProperty, stateContainer.Calendars.Items.First().Id);
            }

            // }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, $"Error Loading Data {ex.Message}");
            //await OnDataLoaded.InvokeAsync(false);
        }


    }

    // private async Task SetOrganisationCalendarProperty(string PropertyValue)
    // {

    //     await SetItemProperty(OrganisationCalendarProperty, PropertyValue);
    //     await GetCalendars();


    // }


    private async Task SetCalendarProperty(string PropertyValue)
    {
        var g = stateContainer.Calendars.Items.Where(x => x.Id == PropertyValue).FirstOrDefault();
        if (g != null)
        {
            await SetItemProperty(CalendarProperty, g.Id);
        }
        else
        {
            await logger.LogError("Invalid User Group");
        }

    }


}
